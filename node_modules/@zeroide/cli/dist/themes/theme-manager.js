import { readFileSync } from 'fs';
import { join } from 'path';
export class CustomTheme {
    constructor(name, config) {
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: name
        });
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: config
        });
    }
    get colors() {
        return this.config.colors;
    }
    get type() {
        return 'custom';
    }
    get gradients() {
        return this.config.gradients;
    }
    get preview() {
        return this.config.preview;
    }
}
export class ThemeManager {
    constructor() {
        Object.defineProperty(this, "themes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "activeTheme", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        this.loadThemesFromFile();
    }
    loadThemesFromFile() {
        try {
            const themesPath = join(process.cwd(), 'assets', 'themes.json');
            const themesData = readFileSync(themesPath, 'utf8');
            const themesConfig = JSON.parse(themesData);
            themesConfig.themes.forEach((themeConfig) => {
                const theme = new CustomTheme(themeConfig.name, {
                    colors: themeConfig.colors,
                    gradients: themeConfig.gradients,
                    preview: themeConfig.preview
                });
                this.registerTheme(theme);
            });
        }
        catch (error) {
            console.error('Failed to load themes from file:', error);
            // Fallback to default theme
            this.registerDefaultTheme();
        }
    }
    registerDefaultTheme() {
        const defaultTheme = new CustomTheme('Default Light', {
            colors: {
                primary: 'blue',
                accent: 'magenta',
                error: 'red',
                warning: 'yellow',
                success: 'green',
                text: 'black',
                secondary: 'gray',
                border: 'gray',
                input: 'black',
                selection: 'blue'
            },
            preview: 'Default light theme'
        });
        this.registerTheme(defaultTheme);
    }
    registerTheme(theme) {
        this.themes.set(theme.name, theme);
    }
    setActiveTheme(themeName) {
        const theme = this.themes.get(themeName);
        if (theme) {
            this.activeTheme = theme;
            return true;
        }
        return false;
    }
    getActiveTheme() {
        return this.activeTheme;
    }
    getTheme(themeName) {
        return this.themes.get(themeName);
    }
    getAllThemes() {
        return Array.from(this.themes.values());
    }
    loadCustomThemes(customThemes) {
        Object.entries(customThemes).forEach(([name, themeConfig]) => {
            const theme = new CustomTheme(name, themeConfig);
            this.registerTheme(theme);
        });
    }
    getThemeNames() {
        return Array.from(this.themes.keys());
    }
    reloadThemes() {
        this.themes.clear();
        this.loadThemesFromFile();
    }
}
// Singleton instance
export const themeManager = new ThemeManager();
