export interface Theme {
    name: string;
    type: 'built-in' | 'custom';
    colors: {
        primary: string;
        accent: string;
        error: string;
        warning: string;
        success: string;
        text: string;
        secondary: string;
        border: string;
        input: string;
        selection: string;
        background?: string;
    };
    gradients?: string[];
    preview?: string;
}
export interface CustomThemeConfig {
    colors: Theme['colors'];
    gradients?: string[];
    preview?: string;
}
export declare class CustomTheme implements Theme {
    name: string;
    private config;
    constructor(name: string, config: CustomThemeConfig);
    get colors(): {
        primary: string;
        accent: string;
        error: string;
        warning: string;
        success: string;
        text: string;
        secondary: string;
        border: string;
        input: string;
        selection: string;
        background?: string;
    };
    get type(): "custom";
    get gradients(): string[] | undefined;
    get preview(): string | undefined;
}
export declare class ThemeManager {
    private themes;
    private activeTheme;
    constructor();
    private loadThemesFromFile;
    private registerDefaultTheme;
    registerTheme(theme: Theme): void;
    setActiveTheme(themeName: string): boolean;
    getActiveTheme(): Theme | null;
    getTheme(themeName: string): Theme | undefined;
    getAllThemes(): Theme[];
    loadCustomThemes(customThemes: Record<string, CustomThemeConfig>): void;
    getThemeNames(): string[];
    reloadThemes(): void;
}
export declare const themeManager: ThemeManager;
